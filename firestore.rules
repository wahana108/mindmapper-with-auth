rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Logs Collection
    // Defines rules for the main 'logs' collection.
    match /logs/{logId} {

      // READ:
      // - Anyone can read a log if it is marked as public. This is crucial for server-side rendering (Vercel) which is unauthenticated.
      // - A user can read their own log, even if it's private.
      allow read: if resource.data.isPublic == true || (request.auth != null && request.auth.uid == resource.data.ownerId);

      // LIST:
      // Allows the build server (unauthenticated) and clients to query the logs collection.
      // This is required for generateStaticParams to build static pages for public logs.
      // The rule is safe because the more specific 'read' rule above still prevents 
      // anyone from actually reading the content of private logs, even if they get the ID.
      allow list: if request.query.limit <= 100;

      // CREATE:
      // - A user must be logged in (request.auth != null).
      // - The 'ownerId' of the new log must match the UID of the user creating it.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;

      // UPDATE, DELETE:
      // - A user must be logged in.
      // - The user's UID must match the 'ownerId' of the log they are trying to modify or delete.
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.ownerId;

      // Comments Subcollection
      // Defines rules for comments within a specific log.
      match /comments/{commentId} {
        
        // READ:
        // - Anyone can read comments if the parent log is public.
        // - The owner of the parent log can read comments even if it's private.
        allow read: if get(/databases/$(database)/documents/logs/$(logId)).data.isPublic == true || (request.auth != null && request.auth.uid == get(/databases/$(database)/documents/logs/$(logId)).data.ownerId);

        // CREATE:
        // - Any authenticated user can create a comment.
        // - The authorId of the comment must match their own UID.
        allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;

        // UPDATE, DELETE:
        // - Only the original author of the comment can update or delete it.
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
      }
    }

    // Users Collection
    // Defines rules for user-specific data, like liked logs.
    match /users/{userId}/{document=**} {
      // A user can only read or write to their own documents (e.g., their list of liked logs).
      // This prevents users from seeing or modifying other users' private data.
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
  }
}